# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-06-28 12:02
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataProcessing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha de adquisición')),
                ('type_equation', models.SmallIntegerField(choices=[(0, 'ninguna'), (1, 'linear'), (2, 'logaritmica'), (3, 'exponencial'), (4, 'potencia'), (5, 'polinomica'), (6, 'media móvil')], default=0, verbose_name='tipo de ecuacion')),
                ('type_param', models.SmallIntegerField(choices=[(0, 'longitud [UTM29N]'), (1, 'latitud [UTM29N]'), (2, 'acelerómetro en X [m/s2]'), (3, 'acelerómetro en Y [m/s2]'), (4, 'acelerómetro en Z [m/s2]'), (5, 'gyroscopo en X [rad/s]'), (6, 'gyroscopo en Y [rad/s]'), (7, 'gyroscopo en Z [rad/s]'), (8, 'magnetometro en X [uT]'), (9, 'magnetometro en Y [uT]'), (10, 'magnetometro en Z [uT]'), (11, 'presion [Pa]'), (12, 'temperatura interior [ºC]'), (13, 'temperatura aire [ºC]'), (14, 'temperatura agua [ºC]'), (15, 'iluminación FrontRigth [Lux]'), (16, 'iluminación FrontLeft [Lux]'), (17, 'iluminación BackRigth [Lux]'), (18, 'iluminación BackLeft [Lux]'), (19, 'voltaje [V]'), (20, 'amperios [A]'), (21, 'intensidad viento [m/s]'), (22, 'dirección viento [ºDeg]'), (23, 'humedad relativa [%]')], default=0, verbose_name='tipo de parámetro')),
                ('args', models.CharField(blank=True, max_length=200, null=True, verbose_name='constantes de la ecuación')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.Device', verbose_name='dispositivo')),
            ],
            options={
                'db_table': 'msr_dataprocess',
                'verbose_name': 'coeficientes de proceso del dato',
                'verbose_name_plural': 'coeficientes de proceso de los datos',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DeviceDataRaw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha de adquisición')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=32629, verbose_name='punto de adquisición')),
                ('millisecons', models.BigIntegerField(default=-1, verbose_name='tiempo desde inicio de hardware (milissec)')),
                ('latitude_raw', models.FloatField(default=-500.0, verbose_name='Latitud GPS UTM29N (RAW)')),
                ('longitude_raw', models.FloatField(default=-500.0, verbose_name='Longitud GPS UTM29N (RAW)')),
                ('timestamp_gps', models.DateTimeField(blank=True, null=True, verbose_name='fecha del GPS')),
                ('accX_raw', models.SmallIntegerField(default=-1, verbose_name='accelerómetro X (RAW)')),
                ('accY_raw', models.SmallIntegerField(default=-1, verbose_name='accelerómetro Y (RAW)')),
                ('accZ_raw', models.SmallIntegerField(default=-1, verbose_name='accelerómetro Z (RAW)')),
                ('gyrX_raw', models.SmallIntegerField(default=-1, verbose_name='giróscopo X (RAW)')),
                ('gyrY_raw', models.SmallIntegerField(default=-1, verbose_name='giróscopo Y (RAW)')),
                ('gyrZ_raw', models.SmallIntegerField(default=-1, verbose_name='giróscopo Z (RAW)')),
                ('magX_raw', models.SmallIntegerField(default=-1, verbose_name='magnetómetro X (RAW)')),
                ('magY_raw', models.SmallIntegerField(default=-1, verbose_name='magnetómetro Y (RAW)')),
                ('magZ_raw', models.SmallIntegerField(default=-1, verbose_name='magnetómetro Z (RAW)')),
                ('press_air_raw', models.SmallIntegerField(default=-1, verbose_name='presión aire (RAW)')),
                ('temp_int_raw', models.SmallIntegerField(default=-999, verbose_name='temperatura interna (RAW)')),
                ('temp_air_raw', models.SmallIntegerField(default=-999, verbose_name='temperatura aire (RAW)')),
                ('temp_water_raw', models.SmallIntegerField(default=-999, verbose_name='temperatura agua (RAW)')),
                ('ldr_fr_raw', models.SmallIntegerField(default=-1, verbose_name='luz incidente FrontRigth (RAW)')),
                ('ldr_fl_raw', models.SmallIntegerField(default=-1, verbose_name='luz incidente FrontLeft (RAW)')),
                ('ldr_br_raw', models.SmallIntegerField(default=-1, verbose_name='luz incidente BackRigth (RAW)')),
                ('ldr_bl_raw', models.SmallIntegerField(default=-1, verbose_name='luz incidente BackLeft (RAW)')),
                ('power_volt', models.SmallIntegerField(default=-999, verbose_name='voltaje solar (RAW)')),
                ('power_amp', models.SmallIntegerField(default=-999, verbose_name='amperios solar (RAW)')),
                ('ref_air_temp', models.FloatField(blank=True, null=True, verbose_name='temperatura de referencia [ºC]')),
                ('ref_pressure', models.FloatField(blank=True, null=True, verbose_name='presion de referencia [hPa]')),
                ('ref_humidity_relative', models.FloatField(blank=True, null=True, verbose_name='humedad relativa [%]')),
                ('ref_wind_module', models.FloatField(blank=True, null=True, verbose_name='intensidad del viento [m/s]')),
                ('ref_wind_direction', models.FloatField(blank=True, null=True, verbose_name='direccion del viento [ºDeg]')),
                ('ranking', models.SmallIntegerField(blank=True, null=True, verbose_name='Posición en la carrera]')),
                ('velocity', models.FloatField(blank=True, null=True, verbose_name='Velocidad [m/s]')),
                ('direction', models.SmallIntegerField(blank=True, null=True, verbose_name='Dirección [ºDeg]')),
                ('accX_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accX_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro X')),
                ('accY_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accY_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro Y')),
                ('accZ_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accZ_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro Z')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.Device', verbose_name='dispositivo')),
                ('gyrX_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrX_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo X')),
                ('gyrY_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrY_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo Y')),
                ('gyrZ_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrZ_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo Z')),
                ('ldr_bl_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_ldr_bl_coef', to='telemetrydata.DataProcessing', verbose_name='calibración iluminación BackLeft')),
                ('ldr_br_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_ldr_br_coef', to='telemetrydata.DataProcessing', verbose_name='calibración iluminación BackRigth')),
                ('ldr_fl_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_ldr_fl_coef', to='telemetrydata.DataProcessing', verbose_name='calibración iluminación FrontLeft')),
                ('ldr_fr_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_ldr_fr_coef', to='telemetrydata.DataProcessing', verbose_name='calibración iluminación FrontRigth')),
                ('magX_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_magX_coef', to='telemetrydata.DataProcessing', verbose_name='calibración magnetómetro X')),
                ('magY_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_magY_coef', to='telemetrydata.DataProcessing', verbose_name='calibración magnetómetro Y')),
                ('magZ_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_magZ_coef', to='telemetrydata.DataProcessing', verbose_name='calibración magnetómetro Z')),
                ('power_amp_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_power_amp_coef', to='telemetrydata.DataProcessing', verbose_name='calibración Amperios')),
                ('power_volt_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_power_volt_coef', to='telemetrydata.DataProcessing', verbose_name='calibración Voltaje')),
                ('press_air_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_press_coef', to='telemetrydata.DataProcessing', verbose_name='calibración presión aire')),
                ('temp_air_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_temp_air_coef', to='telemetrydata.DataProcessing', verbose_name='calibración temperatura aire')),
                ('temp_int_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_temp_int_coef', to='telemetrydata.DataProcessing', verbose_name='calibración temperatura interna')),
                ('temp_water_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_temp_water_coef', to='telemetrydata.DataProcessing', verbose_name='calibración temperatura agua')),
            ],
            options={
                'db_table': 'msr_devdataraw',
                'verbose_name': 'medida de dispositivo',
                'verbose_name_plural': 'medidas de dispositivos',
                'managed': True,
            },
        ),
    ]
