# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-06-23 10:33
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataProcessing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha de adquisición')),
                ('type_equation', models.SmallIntegerField(choices=[(0, 'ninguna'), (1, 'linear'), (2, 'logaritmica'), (3, 'exponencial'), (4, 'potencia'), (5, 'polinomica'), (6, 'media móvil')], default=0, verbose_name='tipo de ecuacion')),
                ('type_param', models.SmallIntegerField(choices=[(0, 'longitud [UTM29N]'), (1, 'latitud [UTM29N]'), (2, 'acelerómetro en X [m/s2]'), (3, 'acelerómetro en Y [m/s2]'), (4, 'acelerómetro en Z [m/s2]'), (5, 'gyroscopo en X [rad/s]'), (6, 'gyroscopo en Y [rad/s]'), (7, 'gyroscopo en Z [rad/s]'), (8, 'magnetometro en X [uT]'), (9, 'magnetometro en Y [uT]'), (10, 'magnetometro en Z [uT]'), (11, 'presion [Pa]'), (12, 'temperatura interior [ºC]'), (13, 'iluminación [Lux]'), (14, 'orientacion [ºDEG]'), (15, 'voltaje [V]'), (16, 'amperios [A]'), (17, 'intensidad viento [m/s]'), (18, 'dirección viento [ºDeg]'), (19, 'humedad relativa [%]')], default=0, verbose_name='tipo de parámetro')),
                ('args', models.CharField(blank=True, max_length=200, null=True, verbose_name='constantes de la ecuación')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.Device', verbose_name='dispositivo')),
            ],
            options={
                'verbose_name': 'coeficientes de proceso del dato',
                'verbose_name_plural': 'coeficientes de proceso de los datos',
                'db_table': 'msr_dataprocess',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DeviceDataRaw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha de envio')),
                ('timestamp_rcv', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha recibido')),
                ('nextHop', models.SmallIntegerField(default=-1, verbose_name='siguiente Salto')),
                ('rssi', models.SmallIntegerField(default=0, verbose_name='intensidad señal')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=32629, verbose_name='punto de adquisición')),
                ('gps_precision', models.SmallIntegerField(default=-1, verbose_name='Precision del GPS')),
                ('gps_itow', models.BigIntegerField(default=-1, verbose_name='tiempo desde inicio de GPS (milissec)')),
                ('gps_latitude', models.FloatField(default=-500.0, verbose_name='Latitud GPS UTM29N (RAW)')),
                ('gps_longitude', models.FloatField(default=-500.0, verbose_name='Longitud GPS UTM29N (RAW)')),
                ('gps_heading', models.SmallIntegerField(default=-1, verbose_name='orientacion del GPS')),
                ('bearing_avg', models.SmallIntegerField(default=-1, verbose_name='orientacion del magnetómetro (media) (RAW)')),
                ('bearing_std', models.SmallIntegerField(default=-1, verbose_name='orientacion del magnetómetro (dsv_std) (RAW)')),
                ('voltage_batt_avg', models.SmallIntegerField(default=-1, verbose_name='volt bateria (media) (RAW)')),
                ('voltage_batt_std', models.SmallIntegerField(default=-1, verbose_name='volt bateria (dsv_std) (RAW)')),
                ('amp_batt_avg', models.SmallIntegerField(default=-32768, verbose_name='amp bateria (media) (RAW)')),
                ('amp_batt_std', models.SmallIntegerField(default=-32768, verbose_name='amp bateria (dsv_std) (RAW)')),
                ('pressure_avg', models.SmallIntegerField(default=-1, verbose_name='presion (media) (RAW)')),
                ('pressure_std', models.SmallIntegerField(default=-1, verbose_name='presion (dsv_std) (RAW)')),
                ('ligth_avg', models.SmallIntegerField(default=-1, verbose_name='luz (media) (RAW)')),
                ('ligth_std', models.SmallIntegerField(default=-1, verbose_name='luz (dsv_std) (RAW)')),
                ('accX_avg', models.SmallIntegerField(default=-32768, verbose_name='accelerómetro (media) X (RAW)')),
                ('accX_std', models.SmallIntegerField(default=-1, verbose_name='accelerómetro (dsv_std) X (RAW)')),
                ('accY_avg', models.SmallIntegerField(default=-32768, verbose_name='accelerómetro (media) Y (RAW)')),
                ('accY_std', models.SmallIntegerField(default=-1, verbose_name='accelerómetro (dsv_std) Y (RAW)')),
                ('accZ_avg', models.SmallIntegerField(default=-32768, verbose_name='accelerómetro (media) Z (RAW)')),
                ('accZ_std', models.SmallIntegerField(default=-1, verbose_name='accelerómetro (dsv_std) Z (RAW)')),
                ('gyrX_avg', models.SmallIntegerField(default=-32768, verbose_name='giroscopo (media) X (RAW)')),
                ('gyrX_std', models.SmallIntegerField(default=-1, verbose_name='giroscopo (dsv_std) X (RAW)')),
                ('gyrY_avg', models.SmallIntegerField(default=-32768, verbose_name='giroscopo (media) Y (RAW)')),
                ('gyrY_std', models.SmallIntegerField(default=-1, verbose_name='giroscopo (dsv_std) Y (RAW)')),
                ('gyrZ_avg', models.SmallIntegerField(default=-32768, verbose_name='giroscopo (media) Z (RAW)')),
                ('gyrZ_std', models.SmallIntegerField(default=-1, verbose_name='giroscopo (dsv_std) Z (RAW)')),
                ('ref_air_temp', models.FloatField(blank=True, null=True, verbose_name='temperatura de referencia [ºC]')),
                ('ref_pressure', models.FloatField(blank=True, null=True, verbose_name='presion de referencia [hPa]')),
                ('ref_humidity_relative', models.FloatField(blank=True, null=True, verbose_name='humedad relativa [%]')),
                ('ref_wind_module', models.FloatField(blank=True, null=True, verbose_name='intensidad del viento [m/s]')),
                ('ref_wind_direction', models.FloatField(blank=True, null=True, verbose_name='direccion del viento [ºDeg]')),
                ('ranking', models.SmallIntegerField(blank=True, null=True, verbose_name='Posición en la carrera]')),
                ('velocity', models.FloatField(blank=True, null=True, verbose_name='Velocidad [m/s]')),
                ('direction', models.SmallIntegerField(blank=True, null=True, verbose_name='Dirección [ºDeg]')),
                ('accX_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accX_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro X')),
                ('accY_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accY_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro Y')),
                ('accZ_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_accZ_coef', to='telemetrydata.DataProcessing', verbose_name='calibración accelerómetro Z')),
                ('amp_batt_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_amp_batt_coef', to='telemetrydata.DataProcessing', verbose_name='calibración amperios bateria')),
                ('bearing_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_bearing_coef', to='telemetrydata.DataProcessing', verbose_name='calibración de orientacion')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.Device', verbose_name='dispositivo')),
                ('gyrX_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrX_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo X')),
                ('gyrY_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrY_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo Y')),
                ('gyrZ_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_gyrZ_coef', to='telemetrydata.DataProcessing', verbose_name='calibración giróscopo Z')),
                ('ligth_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_ligth_coef', to='telemetrydata.DataProcessing', verbose_name='calibración luz')),
                ('pressure_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_pressure_coef', to='telemetrydata.DataProcessing', verbose_name='calibración presión aire')),
                ('voltage_batt_coef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_voltage_batt_coef', to='telemetrydata.DataProcessing', verbose_name='calibración voltaje bateria')),
            ],
            options={
                'verbose_name': 'medida de dispositivo',
                'verbose_name_plural': 'medidas de dispositivos',
                'db_table': 'msr_devdataraw',
                'managed': True,
            },
        ),
    ]
